// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_crowdfunding_example::project {
    use std::option;
    use std::string::String;
    use sui::balance::Balance;
    use sui::event;
    use sui::object::{Self, ID, UID};
    use sui::sui::SUI;
    use sui::table;
    use sui::transfer;
    use sui::tx_context::TxContext;
    use sui_crowdfunding_example::donation::{Self, Donation};
    friend sui_crowdfunding_example::project_create_logic;
    friend sui_crowdfunding_example::project_update_logic;
    friend sui_crowdfunding_example::project_start_logic;
    friend sui_crowdfunding_example::project_donate_logic;
    friend sui_crowdfunding_example::project_withdraw_logic;
    friend sui_crowdfunding_example::project_refund_logic;
    friend sui_crowdfunding_example::project_aggregate;

    const EID_ALREADY_EXISTS: u64 = 101;
    const EDATA_TOO_LONG: u64 = 102;
    const EINAPPROPRIATE_VERSION: u64 = 103;
    const EID_NOT_FOUND: u64 = 106;

    struct Project has key {
        id: UID,
        version: u64,
        owner: address,
        title: String,
        description: String,
        target: u64,
        deadline: u64,
        image: String,
        vault: Balance<SUI>,
        donations: table::Table<address, Donation>,
    }

    public fun id(project: &Project): object::ID {
        object::uid_to_inner(&project.id)
    }

    public fun version(project: &Project): u64 {
        project.version
    }

    public fun owner(project: &Project): address {
        project.owner
    }

    public(friend) fun set_owner(project: &mut Project, owner: address) {
        project.owner = owner;
    }

    public fun title(project: &Project): String {
        project.title
    }

    public(friend) fun set_title(project: &mut Project, title: String) {
        assert!(std::string::length(&title) <= 200, EDATA_TOO_LONG);
        project.title = title;
    }

    public fun description(project: &Project): String {
        project.description
    }

    public(friend) fun set_description(project: &mut Project, description: String) {
        assert!(std::string::length(&description) <= 2000, EDATA_TOO_LONG);
        project.description = description;
    }

    public fun target(project: &Project): u64 {
        project.target
    }

    public(friend) fun set_target(project: &mut Project, target: u64) {
        project.target = target;
    }

    public fun deadline(project: &Project): u64 {
        project.deadline
    }

    public(friend) fun set_deadline(project: &mut Project, deadline: u64) {
        project.deadline = deadline;
    }

    public fun image(project: &Project): String {
        project.image
    }

    public(friend) fun set_image(project: &mut Project, image: String) {
        assert!(std::string::length(&image) <= 200, EDATA_TOO_LONG);
        project.image = image;
    }

    public(friend) fun borrow_vault(project: &Project): &Balance<SUI> {
        &project.vault
    }

    public(friend) fun borrow_mut_vault(project: &mut Project): &mut Balance<SUI> {
        &mut project.vault
    }

    public(friend) fun add_donation(project: &mut Project, donation: Donation) {
        let key = donation::donator(&donation);
        assert!(!table::contains(&project.donations, key), EID_ALREADY_EXISTS);
        table::add(&mut project.donations, key, donation);
    }

    public(friend) fun remove_donation(project: &mut Project, donator: address) {
        assert!(table::contains(&project.donations, donator), EID_NOT_FOUND);
        let donation = table::remove(&mut project.donations, donator);
        donation::drop_donation(donation);
    }

    public(friend) fun borrow_mut_donation(project: &mut Project, donator: address): &mut Donation {
        table::borrow_mut(&mut project.donations, donator)
    }

    public fun borrow_donation(project: &Project, donator: address): &Donation {
        table::borrow(&project.donations, donator)
    }

    public fun donations_contains(project: &Project, donator: address): bool {
        table::contains(&project.donations, donator)
    }

    public fun donations_length(project: &Project): u64 {
        table::length(&project.donations)
    }

    public(friend) fun new_project(
        owner: address,
        title: String,
        description: String,
        target: u64,
        deadline: u64,
        image: String,
        ctx: &mut TxContext,
    ): Project {
        assert!(std::string::length(&title) <= 200, EDATA_TOO_LONG);
        assert!(std::string::length(&description) <= 2000, EDATA_TOO_LONG);
        assert!(std::string::length(&image) <= 200, EDATA_TOO_LONG);
        Project {
            id: object::new(ctx),
            version: 0,
            owner,
            title,
            description,
            target,
            deadline,
            image,
            vault: sui::balance::zero(),
            donations: table::new<address, Donation>(ctx),
        }
    }

    struct ProjectCreated has copy, drop {
        id: option::Option<object::ID>,
        platform_id: ID,
        owner: address,
        title: String,
        description: String,
        target: u64,
        deadline: u64,
        image: String,
    }

    public fun project_created_id(project_created: &ProjectCreated): option::Option<object::ID> {
        project_created.id
    }

    public(friend) fun set_project_created_id(project_created: &mut ProjectCreated, id: object::ID) {
        project_created.id = option::some(id);
    }

    public fun project_created_platform_id(project_created: &ProjectCreated): ID {
        project_created.platform_id
    }

    public fun project_created_owner(project_created: &ProjectCreated): address {
        project_created.owner
    }

    public fun project_created_title(project_created: &ProjectCreated): String {
        project_created.title
    }

    public fun project_created_description(project_created: &ProjectCreated): String {
        project_created.description
    }

    public fun project_created_target(project_created: &ProjectCreated): u64 {
        project_created.target
    }

    public fun project_created_deadline(project_created: &ProjectCreated): u64 {
        project_created.deadline
    }

    public fun project_created_image(project_created: &ProjectCreated): String {
        project_created.image
    }

    public(friend) fun new_project_created(
        platform_id: ID,
        owner: address,
        title: String,
        description: String,
        target: u64,
        deadline: u64,
        image: String,
    ): ProjectCreated {
        ProjectCreated {
            id: option::none(),
            platform_id,
            owner,
            title,
            description,
            target,
            deadline,
            image,
        }
    }

    struct ProjectUpdated has copy, drop {
        id: object::ID,
        version: u64,
        title: String,
        description: String,
        target: u64,
        image: String,
    }

    public fun project_updated_id(project_updated: &ProjectUpdated): object::ID {
        project_updated.id
    }

    public fun project_updated_title(project_updated: &ProjectUpdated): String {
        project_updated.title
    }

    public fun project_updated_description(project_updated: &ProjectUpdated): String {
        project_updated.description
    }

    public fun project_updated_target(project_updated: &ProjectUpdated): u64 {
        project_updated.target
    }

    public fun project_updated_image(project_updated: &ProjectUpdated): String {
        project_updated.image
    }

    public(friend) fun new_project_updated(
        project: &Project,
        title: String,
        description: String,
        target: u64,
        image: String,
    ): ProjectUpdated {
        ProjectUpdated {
            id: id(project),
            version: version(project),
            title,
            description,
            target,
            image,
        }
    }

    struct ProjectStarted has copy, drop {
        id: object::ID,
        version: u64,
    }

    public fun project_started_id(project_started: &ProjectStarted): object::ID {
        project_started.id
    }

    public(friend) fun new_project_started(
        project: &Project,
    ): ProjectStarted {
        ProjectStarted {
            id: id(project),
            version: version(project),
        }
    }

    struct DonationReceived has copy, drop {
        id: object::ID,
        version: u64,
        amount: u64,
    }

    public fun donation_received_id(donation_received: &DonationReceived): object::ID {
        donation_received.id
    }

    public fun donation_received_amount(donation_received: &DonationReceived): u64 {
        donation_received.amount
    }

    public(friend) fun new_donation_received(
        project: &Project,
        amount: u64,
    ): DonationReceived {
        DonationReceived {
            id: id(project),
            version: version(project),
            amount,
        }
    }

    struct VaultWithdrawn has copy, drop {
        id: object::ID,
        version: u64,
        amount: u64,
    }

    public fun vault_withdrawn_id(vault_withdrawn: &VaultWithdrawn): object::ID {
        vault_withdrawn.id
    }

    public fun vault_withdrawn_amount(vault_withdrawn: &VaultWithdrawn): u64 {
        vault_withdrawn.amount
    }

    public(friend) fun new_vault_withdrawn(
        project: &Project,
        amount: u64,
    ): VaultWithdrawn {
        VaultWithdrawn {
            id: id(project),
            version: version(project),
            amount,
        }
    }

    struct DonationRefunded has copy, drop {
        id: object::ID,
        version: u64,
        amount: u64,
    }

    public fun donation_refunded_id(donation_refunded: &DonationRefunded): object::ID {
        donation_refunded.id
    }

    public fun donation_refunded_amount(donation_refunded: &DonationRefunded): u64 {
        donation_refunded.amount
    }

    public(friend) fun new_donation_refunded(
        project: &Project,
        amount: u64,
    ): DonationRefunded {
        DonationRefunded {
            id: id(project),
            version: version(project),
            amount,
        }
    }


    public(friend) fun transfer_object(project: Project, recipient: address) {
        assert!(project.version == 0, EINAPPROPRIATE_VERSION);
        transfer::transfer(project, recipient);
    }

    public(friend) fun update_version_and_transfer_object(project: Project, recipient: address) {
        update_object_version(&mut project);
        transfer::transfer(project, recipient);
    }

    public(friend) fun share_object(project: Project) {
        assert!(project.version == 0, EINAPPROPRIATE_VERSION);
        transfer::share_object(project);
    }

    public(friend) fun update_version_and_share_object(project: Project) {
        update_object_version(&mut project);
        transfer::share_object(project);
    }

    public(friend) fun freeze_object(project: Project) {
        assert!(project.version == 0, EINAPPROPRIATE_VERSION);
        transfer::freeze_object(project);
    }

    public(friend) fun update_version_and_freeze_object(project: Project) {
        update_object_version(&mut project);
        transfer::freeze_object(project);
    }

    public(friend) fun update_object_version(project: &mut Project) {
        project.version = project.version + 1;
        //assert!(project.version != 0, EINAPPROPRIATE_VERSION);
    }

    public(friend) fun drop_project(project: Project) {
        let Project {
            id,
            version: _version,
            owner: _owner,
            title: _title,
            description: _description,
            target: _target,
            deadline: _deadline,
            image: _image,
            vault,
            donations,
        } = project;
        object::delete(id);
        sui::balance::destroy_zero(vault);
        table::destroy_empty(donations);
    }

    public(friend) fun emit_project_created(project_created: ProjectCreated) {
        event::emit(project_created);
    }

    public(friend) fun emit_project_updated(project_updated: ProjectUpdated) {
        event::emit(project_updated);
    }

    public(friend) fun emit_project_started(project_started: ProjectStarted) {
        event::emit(project_started);
    }

    public(friend) fun emit_donation_received(donation_received: DonationReceived) {
        event::emit(donation_received);
    }

    public(friend) fun emit_vault_withdrawn(vault_withdrawn: VaultWithdrawn) {
        event::emit(vault_withdrawn);
    }

    public(friend) fun emit_donation_refunded(donation_refunded: DonationRefunded) {
        event::emit(donation_refunded);
    }

}
