// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_crowdfunding_example::platform {
    use std::string::String;
    use sui::event;
    use sui::object::{Self, ID, UID};
    use sui::transfer;
    use sui::tx_context::TxContext;

    struct PLATFORM has drop {}

    friend sui_crowdfunding_example::platform_add_project_logic;
    friend sui_crowdfunding_example::platform_aggregate;

    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    #[allow(unused_const)]
    const EInappropriateVersion: u64 = 103;

    fun init(otw: PLATFORM, ctx: &mut TxContext) {
        let platform = new_platform(
            otw,
            ctx,
        );
        event::emit(new_init_platform_event(&platform));
        share_object(platform);
    }

    struct Platform has key {
        id: UID,
        version: u64,
        name: String,
        projects: vector<ID>,
    }

    public fun id(platform: &Platform): object::ID {
        object::uid_to_inner(&platform.id)
    }

    public fun version(platform: &Platform): u64 {
        platform.version
    }

    public fun name(platform: &Platform): String {
        platform.name
    }

    public(friend) fun set_name(platform: &mut Platform, name: String) {
        assert!(std::string::length(&name) <= 200, EDataTooLong);
        platform.name = name;
    }

    public fun borrow_projects(platform: &Platform): &vector<ID> {
        &platform.projects
    }

    public(friend) fun borrow_mut_projects(platform: &mut Platform): &mut vector<ID> {
        &mut platform.projects
    }

    public fun projects(platform: &Platform): vector<ID> {
        platform.projects
    }

    public(friend) fun set_projects(platform: &mut Platform, projects: vector<ID>) {
        platform.projects = projects;
    }

    public(friend) fun new_platform(
        _witness: PLATFORM,
        ctx: &mut TxContext,
    ): Platform {
        Platform {
            id: object::new(ctx),
            version: 0,
            name: std::string::utf8(b"crowdfunding-platform-example"),
            projects: std::vector::empty(),
        }
    }

    struct InitPlatformEvent has copy, drop {
        id: object::ID,
    }

    public fun init_platform_event_id(init_platform_event: &InitPlatformEvent): object::ID {
        init_platform_event.id
    }

    public(friend) fun new_init_platform_event(
        platform: &Platform,
    ): InitPlatformEvent {
        InitPlatformEvent {
            id: id(platform),
        }
    }

    struct ProjectAddedToPlatform has copy, drop {
        id: object::ID,
        version: u64,
        project_id: ID,
    }

    public fun project_added_to_platform_id(project_added_to_platform: &ProjectAddedToPlatform): object::ID {
        project_added_to_platform.id
    }

    public fun project_added_to_platform_project_id(project_added_to_platform: &ProjectAddedToPlatform): ID {
        project_added_to_platform.project_id
    }

    public(friend) fun new_project_added_to_platform(
        platform: &Platform,
        project_id: ID,
    ): ProjectAddedToPlatform {
        ProjectAddedToPlatform {
            id: id(platform),
            version: version(platform),
            project_id,
        }
    }


    #[lint_allow(share_owned)]
    public(friend) fun share_object(platform: Platform) {
        assert!(platform.version == 0, EInappropriateVersion);
        transfer::share_object(platform);
    }

    public(friend) fun update_object_version(platform: &mut Platform) {
        platform.version = platform.version + 1;
        //assert!(platform.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_platform(platform: Platform) {
        let Platform {
            id,
            version: _version,
            name: _name,
            projects: _projects,
        } = platform;
        object::delete(id);
    }

    public(friend) fun emit_project_added_to_platform(project_added_to_platform: ProjectAddedToPlatform) {
        event::emit(project_added_to_platform);
    }

}
