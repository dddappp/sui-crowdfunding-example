// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.domain.project;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suicrowdfundingexample.domain.*;
import org.test.suicrowdfundingexample.specialization.*;
import org.test.suicrowdfundingexample.domain.AbstractEvent;

public abstract class AbstractProjectEvent extends AbstractEvent implements ProjectEvent.SqlProjectEvent, SuiEventEnvelope.MutableSuiEventEnvelope, SuiMoveEvent.MutableSuiMoveEvent, HasStatus.MutableHasStatus {
    private ProjectEventId projectEventId = new ProjectEventId();

    public ProjectEventId getProjectEventId() {
        return this.projectEventId;
    }

    public void setProjectEventId(ProjectEventId eventId) {
        this.projectEventId = eventId;
    }
    
    public String getId() {
        return getProjectEventId().getId();
    }

    public void setId(String id) {
        getProjectEventId().setId(id);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getProjectEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getProjectEventId().setVersion(version);
    }

    private Long suiTimestamp;

    public Long getSuiTimestamp() {
        return this.suiTimestamp;
    }
    
    public void setSuiTimestamp(Long suiTimestamp) {
        this.suiTimestamp = suiTimestamp;
    }

    private String suiTxDigest;

    public String getSuiTxDigest() {
        return this.suiTxDigest;
    }
    
    public void setSuiTxDigest(String suiTxDigest) {
        this.suiTxDigest = suiTxDigest;
    }

    private BigInteger suiEventSeq;

    public BigInteger getSuiEventSeq() {
        return this.suiEventSeq;
    }
    
    public void setSuiEventSeq(BigInteger suiEventSeq) {
        this.suiEventSeq = suiEventSeq;
    }

    private String suiPackageId;

    public String getSuiPackageId() {
        return this.suiPackageId;
    }
    
    public void setSuiPackageId(String suiPackageId) {
        this.suiPackageId = suiPackageId;
    }

    private String suiTransactionModule;

    public String getSuiTransactionModule() {
        return this.suiTransactionModule;
    }
    
    public void setSuiTransactionModule(String suiTransactionModule) {
        this.suiTransactionModule = suiTransactionModule;
    }

    private String suiSender;

    public String getSuiSender() {
        return this.suiSender;
    }
    
    public void setSuiSender(String suiSender) {
        this.suiSender = suiSender;
    }

    private String suiType;

    public String getSuiType() {
        return this.suiType;
    }
    
    public void setSuiType(String suiType) {
        this.suiType = suiType;
    }

    private String status;

    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractProjectEvent() {
    }

    protected AbstractProjectEvent(ProjectEventId eventId) {
        this.projectEventId = eventId;
    }

    protected DonationEventDao getDonationEventDao() {
        return (DonationEventDao)ApplicationContext.current.get("donationEventDao");
    }

    protected DonationEventId newDonationEventId(String donator)
    {
        DonationEventId eventId = new DonationEventId(this.getProjectEventId().getId(), 
            donator, 
            this.getProjectEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(DonationEvent.SqlDonationEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(ProjectEvent.SqlProjectEvent oe, DonationEvent.SqlDonationEvent e)
    {
        if (!oe.getProjectEventId().getId().equals(e.getDonationEventId().getProjectId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id Id %1$s but inner id ProjectId %2$s", 
                oe.getProjectEventId().getId(), e.getDonationEventId().getProjectId());
        }
    }


    public abstract String getEventType();

    public static class ProjectClobEvent extends AbstractProjectEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventType() {
            return "ProjectClobEvent";
        }

    }

    public static class ProjectCreated extends ProjectClobEvent implements ProjectEvent.ProjectCreated {

        @Override
        public String getEventType() {
            return "ProjectCreated";
        }

        public String getPlatformId() {
            Object val = getDynamicProperties().get("platformId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setPlatformId(String value) {
            getDynamicProperties().put("platformId", value);
        }

        public String getOwner() {
            Object val = getDynamicProperties().get("owner");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setOwner(String value) {
            getDynamicProperties().put("owner", value);
        }

        public String getTitle() {
            Object val = getDynamicProperties().get("title");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setTitle(String value) {
            getDynamicProperties().put("title", value);
        }

        public String getDescription() {
            Object val = getDynamicProperties().get("description");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setDescription(String value) {
            getDynamicProperties().put("description", value);
        }

        public BigInteger getTarget() {
            Object val = getDynamicProperties().get("target");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setTarget(BigInteger value) {
            getDynamicProperties().put("target", value);
        }

        public String getImage() {
            Object val = getDynamicProperties().get("image");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setImage(String value) {
            getDynamicProperties().put("image", value);
        }

        public String getTokenType() {
            Object val = getDynamicProperties().get("tokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setTokenType(String value) {
            getDynamicProperties().put("tokenType", value);
        }

    }

    public static class ProjectUpdated extends ProjectClobEvent implements ProjectEvent.ProjectUpdated {

        @Override
        public String getEventType() {
            return "ProjectUpdated";
        }

        public String getTitle() {
            Object val = getDynamicProperties().get("title");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setTitle(String value) {
            getDynamicProperties().put("title", value);
        }

        public String getDescription() {
            Object val = getDynamicProperties().get("description");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setDescription(String value) {
            getDynamicProperties().put("description", value);
        }

        public BigInteger getTarget() {
            Object val = getDynamicProperties().get("target");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setTarget(BigInteger value) {
            getDynamicProperties().put("target", value);
        }

        public String getImage() {
            Object val = getDynamicProperties().get("image");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setImage(String value) {
            getDynamicProperties().put("image", value);
        }

    }

    public static class ProjectStarted extends ProjectClobEvent implements ProjectEvent.ProjectStarted {

        @Override
        public String getEventType() {
            return "ProjectStarted";
        }

        public BigInteger getDeadline() {
            Object val = getDynamicProperties().get("deadline");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setDeadline(BigInteger value) {
            getDynamicProperties().put("deadline", value);
        }

    }

    public static class DonationReceived extends ProjectClobEvent implements ProjectEvent.DonationReceived {

        @Override
        public String getEventType() {
            return "DonationReceived";
        }

        public String getDonator() {
            Object val = getDynamicProperties().get("donator");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setDonator(String value) {
            getDynamicProperties().put("donator", value);
        }

        public BigInteger getAmount() {
            Object val = getDynamicProperties().get("amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setAmount(BigInteger value) {
            getDynamicProperties().put("amount", value);
        }

    }

    public static class VaultWithdrawn extends ProjectClobEvent implements ProjectEvent.VaultWithdrawn {

        @Override
        public String getEventType() {
            return "VaultWithdrawn";
        }

        public BigInteger getAmount() {
            Object val = getDynamicProperties().get("amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setAmount(BigInteger value) {
            getDynamicProperties().put("amount", value);
        }

    }

    public static class DonationRefunded extends ProjectClobEvent implements ProjectEvent.DonationRefunded {

        @Override
        public String getEventType() {
            return "DonationRefunded";
        }

        public String getDonator() {
            Object val = getDynamicProperties().get("donator");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setDonator(String value) {
            getDynamicProperties().put("donator", value);
        }

        public BigInteger getAmount() {
            Object val = getDynamicProperties().get("amount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setAmount(BigInteger value) {
            getDynamicProperties().put("amount", value);
        }

    }


}

