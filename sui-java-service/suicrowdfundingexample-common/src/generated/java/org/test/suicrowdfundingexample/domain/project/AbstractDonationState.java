// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.domain.project;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suicrowdfundingexample.domain.*;
import org.test.suicrowdfundingexample.specialization.*;
import org.test.suicrowdfundingexample.domain.project.DonationEvent.*;

public abstract class AbstractDonationState implements DonationState.SqlDonationState {

    private ProjectDonationId projectDonationId = new ProjectDonationId();

    public ProjectDonationId getProjectDonationId() {
        return this.projectDonationId;
    }

    public void setProjectDonationId(ProjectDonationId projectDonationId) {
        this.projectDonationId = projectDonationId;
    }

    private transient ProjectState projectState;

    public ProjectState getProjectState() {
        return projectState;
    }

    public void setProjectState(ProjectState s) {
        projectState = s;
    }
    
    private ProjectState protectedProjectState;

    protected ProjectState getProtectedProjectState() {
        return protectedProjectState;
    }

    protected void setProtectedProjectState(ProjectState protectedProjectState) {
        this.protectedProjectState = protectedProjectState;
    }

    public String getProjectId() {
        return this.getProjectDonationId().getProjectId();
    }
        
    public void setProjectId(String projectId) {
        this.getProjectDonationId().setProjectId(projectId);
    }

    public String getDonator() {
        return this.getProjectDonationId().getDonator();
    }
        
    public void setDonator(String donator) {
        this.getProjectDonationId().setDonator(donator);
    }

    private BigInteger amount;

    public BigInteger getAmount() {
        return this.amount;
    }

    public void setAmount(BigInteger amount) {
        this.amount = amount;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractDonationState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getDonator().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof DonationState) {
            return Objects.equals(this.getDonator(), ((DonationState)obj).getDonator());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(DonationState s) {
        if (s == this) {
            return;
        }
        this.setAmount(s.getAmount());
        this.setActive(s.getActive());
    }

    public void save() {
    }

    protected void throwOnWrongEvent(DonationEvent event) {
        String stateEntityIdProjectId = this.getProjectDonationId().getProjectId();
        String eventEntityIdProjectId = ((DonationEvent.SqlDonationEvent)event).getDonationEventId().getProjectId();
        if (!stateEntityIdProjectId.equals(eventEntityIdProjectId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id ProjectId %1$s in state but entity id ProjectId %2$s in event", stateEntityIdProjectId, eventEntityIdProjectId);
        }

        String stateEntityIdDonator = this.getProjectDonationId().getDonator();
        String eventEntityIdDonator = ((DonationEvent.SqlDonationEvent)event).getDonationEventId().getDonator();
        if (!stateEntityIdDonator.equals(eventEntityIdDonator)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id Donator %1$s in state but entity id Donator %2$s in event", stateEntityIdDonator, eventEntityIdDonator);
        }


        if (getForReapplying()) { return; }

    }


    public static class SimpleDonationState extends AbstractDonationState {

        public SimpleDonationState() {
        }

        public static SimpleDonationState newForReapplying() {
            SimpleDonationState s = new SimpleDonationState();
            s.initializeForReapplying();
            return s;
        }

    }



}

