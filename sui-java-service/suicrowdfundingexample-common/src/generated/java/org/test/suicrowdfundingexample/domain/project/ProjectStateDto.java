// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.domain.project;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suicrowdfundingexample.domain.*;
import org.test.suicrowdfundingexample.specialization.*;


public class ProjectStateDto {

    private String id;

    public String getId()
    {
        return this.id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    private String owner;

    public String getOwner()
    {
        return this.owner;
    }

    public void setOwner(String owner)
    {
        this.owner = owner;
    }

    private String title;

    public String getTitle()
    {
        return this.title;
    }

    public void setTitle(String title)
    {
        this.title = title;
    }

    private String description;

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    private BigInteger target;

    public BigInteger getTarget()
    {
        return this.target;
    }

    public void setTarget(BigInteger target)
    {
        this.target = target;
    }

    private BigInteger deadline;

    public BigInteger getDeadline()
    {
        return this.deadline;
    }

    public void setDeadline(BigInteger deadline)
    {
        this.deadline = deadline;
    }

    private String image;

    public String getImage()
    {
        return this.image;
    }

    public void setImage(String image)
    {
        this.image = image;
    }

    private java.math.BigInteger vault;

    public java.math.BigInteger getVault()
    {
        return this.vault;
    }

    public void setVault(java.math.BigInteger vault)
    {
        this.vault = vault;
    }

    private BigInteger version;

    public BigInteger getVersion()
    {
        return this.version;
    }

    public void setVersion(BigInteger version)
    {
        this.version = version;
    }

    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }

    private String typeArgumentT;

    public String getTypeArgumentT()
    {
        return this.typeArgumentT;
    }

    public void setTypeArgumentT(String typeArgumentT)
    {
        this.typeArgumentT = typeArgumentT;
    }

    private Long offChainVersion;

    public Long getOffChainVersion()
    {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion)
    {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy)
    {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt()
    {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt)
    {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy()
    {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy)
    {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt()
    {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt)
    {
        this.updatedAt = updatedAt;
    }

    private DonationStateDto[] donations;

    public DonationStateDto[] getDonations()
    {
        return this.donations;
    }    

    public void setDonations(DonationStateDto[] donations)
    {
        this.donations = donations;
    }


    public static class DtoConverter extends AbstractStateDtoConverter
    {
        public static Collection<String> collectionFieldNames = Arrays.asList(new String[]{"Donations"});

        @Override
        protected boolean isCollectionField(String fieldName) {
            return CollectionUtils.collectionContainsIgnoringCase(collectionFieldNames, fieldName);
        }

        public ProjectStateDto[] toProjectStateDtoArray(Iterable<ProjectState> states) {
            return toProjectStateDtoList(states).toArray(new ProjectStateDto[0]);
        }

        public List<ProjectStateDto> toProjectStateDtoList(Iterable<ProjectState> states) {
            ArrayList<ProjectStateDto> stateDtos = new ArrayList();
            for (ProjectState s : states) {
                ProjectStateDto dto = toProjectStateDto(s);
                stateDtos.add(dto);
            }
            return stateDtos;
        }

        public ProjectStateDto toProjectStateDto(ProjectState state)
        {
            if(state == null) {
                return null;
            }
            ProjectStateDto dto = new ProjectStateDto();
            if (returnedFieldsContains("Id")) {
                dto.setId(state.getId());
            }
            if (returnedFieldsContains("Owner")) {
                dto.setOwner(state.getOwner());
            }
            if (returnedFieldsContains("Title")) {
                dto.setTitle(state.getTitle());
            }
            if (returnedFieldsContains("Description")) {
                dto.setDescription(state.getDescription());
            }
            if (returnedFieldsContains("Target")) {
                dto.setTarget(state.getTarget());
            }
            if (returnedFieldsContains("Deadline")) {
                dto.setDeadline(state.getDeadline());
            }
            if (returnedFieldsContains("Image")) {
                dto.setImage(state.getImage());
            }
            if (returnedFieldsContains("Vault")) {
                dto.setVault(state.getVault());
            }
            if (returnedFieldsContains("Version")) {
                dto.setVersion(state.getVersion());
            }
            if (returnedFieldsContains("Active")) {
                dto.setActive(state.getActive());
            }
            if (returnedFieldsContains("TypeArgumentT")) {
                dto.setTypeArgumentT(state.getTypeArgumentT());
            }
            if (returnedFieldsContains("OffChainVersion")) {
                dto.setOffChainVersion(state.getOffChainVersion());
            }
            if (returnedFieldsContains("CreatedBy")) {
                dto.setCreatedBy(state.getCreatedBy());
            }
            if (returnedFieldsContains("CreatedAt")) {
                dto.setCreatedAt(state.getCreatedAt());
            }
            if (returnedFieldsContains("UpdatedBy")) {
                dto.setUpdatedBy(state.getUpdatedBy());
            }
            if (returnedFieldsContains("UpdatedAt")) {
                dto.setUpdatedAt(state.getUpdatedAt());
            }
            if (returnedFieldsContains("Donations")) {
                ArrayList<DonationStateDto> arrayList = new ArrayList();
                if (state.getDonations() != null) {
                    DonationStateDto.DtoConverter conv = new DonationStateDto.DtoConverter();
                    String returnFS = CollectionUtils.mapGetValueIgnoringCase(getReturnedFields(), "Donations");
                    if(returnFS != null) { conv.setReturnedFieldsString(returnFS); } else { conv.setAllFieldsReturned(this.getAllFieldsReturned()); }
                    for (DonationState s : state.getDonations()) {
                        arrayList.add(conv.toDonationStateDto(s));
                    }
                }
                dto.setDonations(arrayList.toArray(new DonationStateDto[0]));
            }
            return dto;
        }

    }
}

