// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.domain.project;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suicrowdfundingexample.domain.*;
import org.test.suicrowdfundingexample.specialization.*;

public abstract class AbstractProjectAggregate extends AbstractAggregate implements ProjectAggregate {
    private ProjectState.MutableProjectState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractProjectAggregate(ProjectState state) {
        this.state = (ProjectState.MutableProjectState)state;
    }

    public ProjectState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        ProjectCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleProjectAggregate extends AbstractProjectAggregate {
        public SimpleProjectAggregate(ProjectState state) {
            super(state);
        }

        @Override
        public void create(String platform, String title, String description, BigInteger target, String image, Long offChainVersion, String commandId, String requesterId, ProjectCommands.Create c) {
            java.util.function.Supplier<ProjectEvent.ProjectCreated> eventFactory = () -> newProjectCreated(platform, title, description, target, image, offChainVersion, commandId, requesterId);
            ProjectEvent.ProjectCreated e;
            try {
                e = verifyCreate(eventFactory, platform, title, description, target, image, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void update(String title, String description, BigInteger target, String image, Long offChainVersion, String commandId, String requesterId, ProjectCommands.Update c) {
            java.util.function.Supplier<ProjectEvent.ProjectUpdated> eventFactory = () -> newProjectUpdated(title, description, target, image, offChainVersion, commandId, requesterId);
            ProjectEvent.ProjectUpdated e;
            try {
                e = verifyUpdate(eventFactory, title, description, target, image, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        @Override
        public void start(String clock, Long offChainVersion, String commandId, String requesterId, ProjectCommands.Start c) {
            java.util.function.Supplier<ProjectEvent.ProjectStarted> eventFactory = () -> newProjectStarted(clock, offChainVersion, commandId, requesterId);
            ProjectEvent.ProjectStarted e;
            try {
                e = verifyStart(eventFactory, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected ProjectEvent.ProjectCreated verifyCreate(java.util.function.Supplier<ProjectEvent.ProjectCreated> eventFactory, String platform, String title, String description, BigInteger target, String image, ProjectCommands.Create c) {
            String Platform = platform;
            String Title = title;
            String Description = description;
            BigInteger Target = target;
            String Image = image;

            ProjectEvent.ProjectCreated e = (ProjectEvent.ProjectCreated) ReflectUtils.invokeStaticMethod(
                    "org.test.suicrowdfundingexample.domain.project.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, String.class, String.class, String.class, BigInteger.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), platform, title, description, target, image, VerificationContext.forCommand(c)}
            );

//package org.test.suicrowdfundingexample.domain.project;
//
//public class CreateLogic {
//    public static ProjectEvent.ProjectCreated verify(java.util.function.Supplier<ProjectEvent.ProjectCreated> eventFactory, ProjectState projectState, String platform, String title, String description, BigInteger target, String image, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ProjectEvent.ProjectUpdated verifyUpdate(java.util.function.Supplier<ProjectEvent.ProjectUpdated> eventFactory, String title, String description, BigInteger target, String image, ProjectCommands.Update c) {
            String Title = title;
            String Description = description;
            BigInteger Target = target;
            String Image = image;

            ProjectEvent.ProjectUpdated e = (ProjectEvent.ProjectUpdated) ReflectUtils.invokeStaticMethod(
                    "org.test.suicrowdfundingexample.domain.project.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, String.class, String.class, BigInteger.class, String.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), title, description, target, image, VerificationContext.forCommand(c)}
            );

//package org.test.suicrowdfundingexample.domain.project;
//
//public class UpdateLogic {
//    public static ProjectEvent.ProjectUpdated verify(java.util.function.Supplier<ProjectEvent.ProjectUpdated> eventFactory, ProjectState projectState, String title, String description, BigInteger target, String image, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ProjectEvent.ProjectStarted verifyStart(java.util.function.Supplier<ProjectEvent.ProjectStarted> eventFactory, ProjectCommands.Start c) {

            ProjectEvent.ProjectStarted e = (ProjectEvent.ProjectStarted) ReflectUtils.invokeStaticMethod(
                    "org.test.suicrowdfundingexample.domain.project.StartLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suicrowdfundingexample.domain.project;
//
//public class StartLogic {
//    public static ProjectEvent.ProjectStarted verify(java.util.function.Supplier<ProjectEvent.ProjectStarted> eventFactory, ProjectState projectState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ProjectEvent.DonationReceived verifyDonate(java.util.function.Supplier<ProjectEvent.DonationReceived> eventFactory, ProjectCommands.Donate c) {

            ProjectEvent.DonationReceived e = (ProjectEvent.DonationReceived) ReflectUtils.invokeStaticMethod(
                    "org.test.suicrowdfundingexample.domain.project.DonateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suicrowdfundingexample.domain.project;
//
//public class DonateLogic {
//    public static ProjectEvent.DonationReceived verify(java.util.function.Supplier<ProjectEvent.DonationReceived> eventFactory, ProjectState projectState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ProjectEvent.VaultWithdrawn verifyWithdraw(java.util.function.Supplier<ProjectEvent.VaultWithdrawn> eventFactory, ProjectCommands.Withdraw c) {

            ProjectEvent.VaultWithdrawn e = (ProjectEvent.VaultWithdrawn) ReflectUtils.invokeStaticMethod(
                    "org.test.suicrowdfundingexample.domain.project.WithdrawLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suicrowdfundingexample.domain.project;
//
//public class WithdrawLogic {
//    public static ProjectEvent.VaultWithdrawn verify(java.util.function.Supplier<ProjectEvent.VaultWithdrawn> eventFactory, ProjectState projectState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected ProjectEvent.DonationRefunded verifyRefund(java.util.function.Supplier<ProjectEvent.DonationRefunded> eventFactory, ProjectCommands.Refund c) {

            ProjectEvent.DonationRefunded e = (ProjectEvent.DonationRefunded) ReflectUtils.invokeStaticMethod(
                    "org.test.suicrowdfundingexample.domain.project.RefundLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, VerificationContext.class},
                    new Object[]{eventFactory, getState(), VerificationContext.forCommand(c)}
            );

//package org.test.suicrowdfundingexample.domain.project;
//
//public class RefundLogic {
//    public static ProjectEvent.DonationRefunded verify(java.util.function.Supplier<ProjectEvent.DonationRefunded> eventFactory, ProjectState projectState, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        protected AbstractProjectEvent.ProjectCreated newProjectCreated(String platform, String title, String description, BigInteger target, String image, Long offChainVersion, String commandId, String requesterId) {
            ProjectEventId eventId = new ProjectEventId(getState().getId(), null);
            AbstractProjectEvent.ProjectCreated e = new AbstractProjectEvent.ProjectCreated();

            e.setPlatformId(null);
            e.setOwner(null);
            e.setTitle(title);
            e.setDescription(description);
            e.setTarget(target);
            e.setImage(image);
            e.setTokenType(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setProjectEventId(eventId);
            return e;
        }

        protected AbstractProjectEvent.ProjectUpdated newProjectUpdated(String title, String description, BigInteger target, String image, Long offChainVersion, String commandId, String requesterId) {
            ProjectEventId eventId = new ProjectEventId(getState().getId(), null);
            AbstractProjectEvent.ProjectUpdated e = new AbstractProjectEvent.ProjectUpdated();

            e.setTitle(title);
            e.setDescription(description);
            e.setTarget(target);
            e.setImage(image);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setProjectEventId(eventId);
            return e;
        }

        protected AbstractProjectEvent.ProjectStarted newProjectStarted(String clock, Long offChainVersion, String commandId, String requesterId) {
            ProjectEventId eventId = new ProjectEventId(getState().getId(), null);
            AbstractProjectEvent.ProjectStarted e = new AbstractProjectEvent.ProjectStarted();

            e.setDeadline(null);
            e.setSuiTimestamp(null);
            e.setSuiTxDigest(null);
            e.setSuiEventSeq(null);
            e.setSuiPackageId(null);
            e.setSuiTransactionModule(null);
            e.setSuiSender(null);
            e.setSuiType(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setProjectEventId(eventId);
            return e;
        }

    }

}

