// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.domain;

import org.test.suicrowdfundingexample.specialization.ReflectUtils;
import org.test.suicrowdfundingexample.specialization.MutationContext;
import org.test.suicrowdfundingexample.specialization.VerificationContext;
import org.test.suicrowdfundingexample.domain.project.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suicrowdfundingexample.domain.*;
import org.test.suicrowdfundingexample.domain.platform.*;

public class StaticMethodConstraints {

    public static void assertStaticVerificationAndMutationMethods() {

        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, String.class, String.class, String.class, BigInteger.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "platform", "title", "description", "target", "image"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.UpdateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, String.class, String.class, BigInteger.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "title", "description", "target", "image"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.StartLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.DonateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.WithdrawLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.RefundLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, ProjectState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.platform.__Init__Logic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlatformState.class, VerificationContext.class},
                    new String[]{"_", "_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.platform.AddProjectLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlatformState.class, String.class, VerificationContext.class},
                    new String[]{"_", "_", "projectId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.platform.CreateLogic",
                    "verify",
                    new Class[]{java.util.function.Supplier.class, PlatformState.class, String[].class, VerificationContext.class},
                    new String[]{"_", "_", "projects"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.CreateLogic",
                    "mutate",
                    new Class[]{ProjectState.class, String.class, String.class, String.class, String.class, BigInteger.class, String.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "platformId", "owner", "title", "description", "target", "image", "tokenType", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.UpdateLogic",
                    "mutate",
                    new Class[]{ProjectState.class, String.class, String.class, BigInteger.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "title", "description", "target", "image", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.project.StartLogic",
                    "mutate",
                    new Class[]{ProjectState.class, BigInteger.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "deadline", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.platform.__Init__Logic",
                    "mutate",
                    new Class[]{PlatformState.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.platform.AddProjectLogic",
                    "mutate",
                    new Class[]{PlatformState.class, String.class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "projectId", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.suicrowdfundingexample.domain.platform.CreateLogic",
                    "mutate",
                    new Class[]{PlatformState.class, String[].class, Long.class, String.class, BigInteger.class, String.class, String.class, String.class, String.class, String.class, MutationContext.class},
                    new String[]{"_", "projects", "suiTimestamp", "suiTxDigest", "suiEventSeq", "suiPackageId", "suiTransactionModule", "suiSender", "suiType", "status"}
            );



    }

}


