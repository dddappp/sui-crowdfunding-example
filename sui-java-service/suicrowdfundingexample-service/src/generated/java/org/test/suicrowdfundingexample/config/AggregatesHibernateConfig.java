// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.config;

import org.test.suicrowdfundingexample.domain.project.*;
import org.test.suicrowdfundingexample.domain.*;
import org.test.suicrowdfundingexample.domain.project.hibernate.*;
import org.test.suicrowdfundingexample.domain.platform.*;
import org.test.suicrowdfundingexample.domain.*;
import org.test.suicrowdfundingexample.domain.platform.hibernate.*;
import org.test.suicrowdfundingexample.specialization.AggregateEventListener;
import org.test.suicrowdfundingexample.specialization.EventStore;
import org.test.suicrowdfundingexample.specialization.IdGenerator;
import org.test.suicrowdfundingexample.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public DonationEventDao donationEventDao(SessionFactory hibernateSessionFactory) {
        HibernateDonationEventDao dao = new HibernateDonationEventDao();
        dao.setSessionFactory(hibernateSessionFactory);
        return dao;
    }

    @Bean
    public ProjectStateRepository projectStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateProjectStateRepository repository = new HibernateProjectStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public ProjectStateQueryRepository projectStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateProjectStateQueryRepository repository = new HibernateProjectStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateProjectEventStore projectEventStore(SessionFactory hibernateSessionFactory) {
        HibernateProjectEventStore eventStore = new HibernateProjectEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractProjectApplicationService.SimpleProjectApplicationService projectApplicationService(
            @Qualifier("projectEventStore") EventStore projectEventStore,
            ProjectStateRepository projectStateRepository,
            ProjectStateQueryRepository projectStateQueryRepository
    ) {
        AbstractProjectApplicationService.SimpleProjectApplicationService applicationService = new AbstractProjectApplicationService.SimpleProjectApplicationService(
                projectEventStore,
                projectStateRepository,
                projectStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public PlatformStateRepository platformStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernatePlatformStateRepository repository = new HibernatePlatformStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public PlatformStateQueryRepository platformStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernatePlatformStateQueryRepository repository = new HibernatePlatformStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernatePlatformEventStore platformEventStore(SessionFactory hibernateSessionFactory) {
        HibernatePlatformEventStore eventStore = new HibernatePlatformEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractPlatformApplicationService.SimplePlatformApplicationService platformApplicationService(
            @Qualifier("platformEventStore") EventStore platformEventStore,
            PlatformStateRepository platformStateRepository,
            PlatformStateQueryRepository platformStateQueryRepository
    ) {
        AbstractPlatformApplicationService.SimplePlatformApplicationService applicationService = new AbstractPlatformApplicationService.SimplePlatformApplicationService(
                platformEventStore,
                platformStateRepository,
                platformStateQueryRepository
        );
        return applicationService;
    }


}
