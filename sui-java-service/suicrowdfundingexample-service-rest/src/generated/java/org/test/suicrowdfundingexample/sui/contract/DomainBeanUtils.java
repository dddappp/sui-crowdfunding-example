// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.sui.contract;

import java.math.*;
import java.util.*;

import com.github.wubuku.sui.bean.MoveEvent;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.bean.Table;
import com.github.wubuku.sui.bean.ObjectTable;
import org.test.suicrowdfundingexample.domain.project.AbstractProjectEvent;
import org.test.suicrowdfundingexample.sui.contract.project.ProjectCreated;
import org.test.suicrowdfundingexample.sui.contract.project.ProjectUpdated;
import org.test.suicrowdfundingexample.sui.contract.project.ProjectStarted;
import org.test.suicrowdfundingexample.sui.contract.project.DonationReceived;
import org.test.suicrowdfundingexample.sui.contract.project.VaultWithdrawn;
import org.test.suicrowdfundingexample.sui.contract.project.DonationRefunded;
import org.test.suicrowdfundingexample.domain.platform.AbstractPlatformEvent;
import org.test.suicrowdfundingexample.sui.contract.platform.InitPlatformEvent;
import org.test.suicrowdfundingexample.sui.contract.platform.ProjectAddedToPlatform;
import org.test.suicrowdfundingexample.sui.contract.platform.PlatformCreated;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }

    public static org.test.suicrowdfundingexample.domain.ObjectTable toObjectTable(ObjectTable contractObjectTable) {
        if (contractObjectTable == null) {
            return null;
        }
        org.test.suicrowdfundingexample.domain.ObjectTable objectTable = new org.test.suicrowdfundingexample.domain.ObjectTable();
        objectTable.setId(contractObjectTable.getFields().getId().getId());
        objectTable.setSize(contractObjectTable.getFields().getSize());
        return objectTable;
    }

    public static org.test.suicrowdfundingexample.domain.Table toTable(Table contractTable) {
        if (contractTable == null) {
            return null;
        }
        org.test.suicrowdfundingexample.domain.Table table = new org.test.suicrowdfundingexample.domain.Table();
        table.setId(contractTable.getFields().getId().getId());
        table.setSize(contractTable.getFields().getSize());
        return table;
    }


    public static AbstractProjectEvent.ProjectCreated toProjectCreated(SuiMoveEventEnvelope<ProjectCreated> eventEnvelope) {
        ProjectCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractProjectEvent.ProjectCreated projectCreated = new AbstractProjectEvent.ProjectCreated();
        projectCreated.setId(contractEvent.getId());
        projectCreated.setPlatformId(contractEvent.getPlatformId());
        projectCreated.setOwner(contractEvent.getOwner());
        projectCreated.setTitle(contractEvent.getTitle());
        projectCreated.setDescription(contractEvent.getDescription());
        projectCreated.setTarget(contractEvent.getTarget());
        projectCreated.setImage(contractEvent.getImage());
        projectCreated.setTokenType(contractEvent.getTokenType());
        projectCreated.setVersion(BigInteger.valueOf(-1));

        projectCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        projectCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        projectCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        projectCreated.setSuiPackageId(eventEnvelope.getPackageId());
        projectCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        projectCreated.setSuiSender(eventEnvelope.getSender());

        return projectCreated;
    }

    public static AbstractProjectEvent.ProjectUpdated toProjectUpdated(SuiMoveEventEnvelope<ProjectUpdated> eventEnvelope) {
        ProjectUpdated contractEvent = eventEnvelope.getParsedJson();

        AbstractProjectEvent.ProjectUpdated projectUpdated = new AbstractProjectEvent.ProjectUpdated();
        projectUpdated.setId(contractEvent.getId());
        projectUpdated.setTitle(contractEvent.getTitle());
        projectUpdated.setDescription(contractEvent.getDescription());
        projectUpdated.setTarget(contractEvent.getTarget());
        projectUpdated.setImage(contractEvent.getImage());
        projectUpdated.setVersion(contractEvent.getVersion());

        projectUpdated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        projectUpdated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        projectUpdated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        projectUpdated.setSuiPackageId(eventEnvelope.getPackageId());
        projectUpdated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        projectUpdated.setSuiSender(eventEnvelope.getSender());

        return projectUpdated;
    }

    public static AbstractProjectEvent.ProjectStarted toProjectStarted(SuiMoveEventEnvelope<ProjectStarted> eventEnvelope) {
        ProjectStarted contractEvent = eventEnvelope.getParsedJson();

        AbstractProjectEvent.ProjectStarted projectStarted = new AbstractProjectEvent.ProjectStarted();
        projectStarted.setId(contractEvent.getId());
        projectStarted.setDeadline(contractEvent.getDeadline());
        projectStarted.setVersion(contractEvent.getVersion());

        projectStarted.setSuiTimestamp(eventEnvelope.getTimestampMs());
        projectStarted.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        projectStarted.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        projectStarted.setSuiPackageId(eventEnvelope.getPackageId());
        projectStarted.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        projectStarted.setSuiSender(eventEnvelope.getSender());

        return projectStarted;
    }

    public static AbstractProjectEvent.DonationReceived toDonationReceived(SuiMoveEventEnvelope<DonationReceived> eventEnvelope) {
        DonationReceived contractEvent = eventEnvelope.getParsedJson();

        AbstractProjectEvent.DonationReceived donationReceived = new AbstractProjectEvent.DonationReceived();
        donationReceived.setId(contractEvent.getId());
        donationReceived.setDonator(contractEvent.getDonator());
        donationReceived.setAmount(contractEvent.getAmount());
        donationReceived.setVersion(contractEvent.getVersion());

        donationReceived.setSuiTimestamp(eventEnvelope.getTimestampMs());
        donationReceived.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        donationReceived.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        donationReceived.setSuiPackageId(eventEnvelope.getPackageId());
        donationReceived.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        donationReceived.setSuiSender(eventEnvelope.getSender());

        return donationReceived;
    }

    public static AbstractProjectEvent.VaultWithdrawn toVaultWithdrawn(SuiMoveEventEnvelope<VaultWithdrawn> eventEnvelope) {
        VaultWithdrawn contractEvent = eventEnvelope.getParsedJson();

        AbstractProjectEvent.VaultWithdrawn vaultWithdrawn = new AbstractProjectEvent.VaultWithdrawn();
        vaultWithdrawn.setId(contractEvent.getId());
        vaultWithdrawn.setAmount(contractEvent.getAmount());
        vaultWithdrawn.setVersion(contractEvent.getVersion());

        vaultWithdrawn.setSuiTimestamp(eventEnvelope.getTimestampMs());
        vaultWithdrawn.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        vaultWithdrawn.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        vaultWithdrawn.setSuiPackageId(eventEnvelope.getPackageId());
        vaultWithdrawn.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        vaultWithdrawn.setSuiSender(eventEnvelope.getSender());

        return vaultWithdrawn;
    }

    public static AbstractProjectEvent.DonationRefunded toDonationRefunded(SuiMoveEventEnvelope<DonationRefunded> eventEnvelope) {
        DonationRefunded contractEvent = eventEnvelope.getParsedJson();

        AbstractProjectEvent.DonationRefunded donationRefunded = new AbstractProjectEvent.DonationRefunded();
        donationRefunded.setId(contractEvent.getId());
        donationRefunded.setDonator(contractEvent.getDonator());
        donationRefunded.setAmount(contractEvent.getAmount());
        donationRefunded.setVersion(contractEvent.getVersion());

        donationRefunded.setSuiTimestamp(eventEnvelope.getTimestampMs());
        donationRefunded.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        donationRefunded.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        donationRefunded.setSuiPackageId(eventEnvelope.getPackageId());
        donationRefunded.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        donationRefunded.setSuiSender(eventEnvelope.getSender());

        return donationRefunded;
    }

    public static AbstractPlatformEvent.InitPlatformEvent toInitPlatformEvent(SuiMoveEventEnvelope<InitPlatformEvent> eventEnvelope) {
        InitPlatformEvent contractEvent = eventEnvelope.getParsedJson();

        AbstractPlatformEvent.InitPlatformEvent initPlatformEvent = new AbstractPlatformEvent.InitPlatformEvent();
        initPlatformEvent.setId(contractEvent.getId());
        initPlatformEvent.setVersion(BigInteger.valueOf(-1));

        initPlatformEvent.setSuiTimestamp(eventEnvelope.getTimestampMs());
        initPlatformEvent.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        initPlatformEvent.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        initPlatformEvent.setSuiPackageId(eventEnvelope.getPackageId());
        initPlatformEvent.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        initPlatformEvent.setSuiSender(eventEnvelope.getSender());

        return initPlatformEvent;
    }

    public static AbstractPlatformEvent.ProjectAddedToPlatform toProjectAddedToPlatform(SuiMoveEventEnvelope<ProjectAddedToPlatform> eventEnvelope) {
        ProjectAddedToPlatform contractEvent = eventEnvelope.getParsedJson();

        AbstractPlatformEvent.ProjectAddedToPlatform projectAddedToPlatform = new AbstractPlatformEvent.ProjectAddedToPlatform();
        projectAddedToPlatform.setId(contractEvent.getId());
        projectAddedToPlatform.setProjectId(contractEvent.getProjectId());
        projectAddedToPlatform.setVersion(contractEvent.getVersion());

        projectAddedToPlatform.setSuiTimestamp(eventEnvelope.getTimestampMs());
        projectAddedToPlatform.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        projectAddedToPlatform.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        projectAddedToPlatform.setSuiPackageId(eventEnvelope.getPackageId());
        projectAddedToPlatform.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        projectAddedToPlatform.setSuiSender(eventEnvelope.getSender());

        return projectAddedToPlatform;
    }

    public static AbstractPlatformEvent.PlatformCreated toPlatformCreated(SuiMoveEventEnvelope<PlatformCreated> eventEnvelope) {
        PlatformCreated contractEvent = eventEnvelope.getParsedJson();

        AbstractPlatformEvent.PlatformCreated platformCreated = new AbstractPlatformEvent.PlatformCreated();
        platformCreated.setId(contractEvent.getId());
        platformCreated.setProjects(contractEvent.getProjects());
        platformCreated.setVersion(BigInteger.valueOf(-1));

        platformCreated.setSuiTimestamp(eventEnvelope.getTimestampMs());
        platformCreated.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        platformCreated.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));

        platformCreated.setSuiPackageId(eventEnvelope.getPackageId());
        platformCreated.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        platformCreated.setSuiSender(eventEnvelope.getSender());

        return platformCreated;
    }


    public static List<String> extractTypeArguments(String type) {
        int i = type.indexOf("<");
        int j = type.lastIndexOf(">");
        if (i > 0 && j > i && j == type.length() - 1) {
            String typeArguments = type.substring(i + 1, j);
            String[] typeArgumentArray = typeArguments.split(",");
            return Arrays.stream(typeArgumentArray).map(String::trim).collect(java.util.stream.Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }
}
