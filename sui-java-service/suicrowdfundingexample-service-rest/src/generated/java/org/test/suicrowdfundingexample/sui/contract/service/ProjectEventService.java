// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suicrowdfundingexample.domain.project.AbstractProjectEvent;
import org.test.suicrowdfundingexample.sui.contract.ContractConstants;
import org.test.suicrowdfundingexample.sui.contract.DomainBeanUtils;
import org.test.suicrowdfundingexample.sui.contract.SuiPackage;
import org.test.suicrowdfundingexample.sui.contract.project.ProjectCreated;
import org.test.suicrowdfundingexample.sui.contract.project.ProjectUpdated;
import org.test.suicrowdfundingexample.sui.contract.project.ProjectStarted;
import org.test.suicrowdfundingexample.sui.contract.project.DonationReceived;
import org.test.suicrowdfundingexample.sui.contract.project.VaultWithdrawn;
import org.test.suicrowdfundingexample.sui.contract.project.DonationRefunded;
import org.test.suicrowdfundingexample.sui.contract.repository.ProjectEventRepository;
import org.test.suicrowdfundingexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ProjectEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private ProjectEventRepository projectEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractProjectEvent event) {
        event.setStatus("D");
        projectEventRepository.save(event);
    }

    @Transactional
    public void pullProjectCreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getProjectCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ProjectCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PROJECT_MODULE_PROJECT_CREATED,
                    cursor, limit, false, ProjectCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ProjectCreated> eventEnvelope : eventPage.getData()) {
                    saveProjectCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getProjectCreatedEventNextCursor() {
        AbstractProjectEvent lastEvent = projectEventRepository.findFirstProjectCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveProjectCreated(SuiMoveEventEnvelope<ProjectCreated> eventEnvelope) {
        AbstractProjectEvent.ProjectCreated projectCreated = DomainBeanUtils.toProjectCreated(eventEnvelope);
        if (projectEventRepository.findById(projectCreated.getProjectEventId()).isPresent()) {
            return;
        }
        projectEventRepository.save(projectCreated);
    }

    @Transactional
    public void pullProjectUpdatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getProjectUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ProjectUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PROJECT_MODULE_PROJECT_UPDATED,
                    cursor, limit, false, ProjectUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ProjectUpdated> eventEnvelope : eventPage.getData()) {
                    saveProjectUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getProjectUpdatedEventNextCursor() {
        AbstractProjectEvent lastEvent = projectEventRepository.findFirstProjectUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveProjectUpdated(SuiMoveEventEnvelope<ProjectUpdated> eventEnvelope) {
        AbstractProjectEvent.ProjectUpdated projectUpdated = DomainBeanUtils.toProjectUpdated(eventEnvelope);
        if (projectEventRepository.findById(projectUpdated.getProjectEventId()).isPresent()) {
            return;
        }
        projectEventRepository.save(projectUpdated);
    }

    @Transactional
    public void pullProjectStartedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getProjectStartedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ProjectStarted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PROJECT_MODULE_PROJECT_STARTED,
                    cursor, limit, false, ProjectStarted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ProjectStarted> eventEnvelope : eventPage.getData()) {
                    saveProjectStarted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getProjectStartedEventNextCursor() {
        AbstractProjectEvent lastEvent = projectEventRepository.findFirstProjectStartedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveProjectStarted(SuiMoveEventEnvelope<ProjectStarted> eventEnvelope) {
        AbstractProjectEvent.ProjectStarted projectStarted = DomainBeanUtils.toProjectStarted(eventEnvelope);
        if (projectEventRepository.findById(projectStarted.getProjectEventId()).isPresent()) {
            return;
        }
        projectEventRepository.save(projectStarted);
    }

    @Transactional
    public void pullDonationReceivedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getDonationReceivedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<DonationReceived> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PROJECT_MODULE_DONATION_RECEIVED,
                    cursor, limit, false, DonationReceived.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<DonationReceived> eventEnvelope : eventPage.getData()) {
                    saveDonationReceived(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getDonationReceivedEventNextCursor() {
        AbstractProjectEvent lastEvent = projectEventRepository.findFirstDonationReceivedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveDonationReceived(SuiMoveEventEnvelope<DonationReceived> eventEnvelope) {
        AbstractProjectEvent.DonationReceived donationReceived = DomainBeanUtils.toDonationReceived(eventEnvelope);
        if (projectEventRepository.findById(donationReceived.getProjectEventId()).isPresent()) {
            return;
        }
        projectEventRepository.save(donationReceived);
    }

    @Transactional
    public void pullVaultWithdrawnEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getVaultWithdrawnEventNextCursor();
        while (true) {
            PaginatedMoveEvents<VaultWithdrawn> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PROJECT_MODULE_VAULT_WITHDRAWN,
                    cursor, limit, false, VaultWithdrawn.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<VaultWithdrawn> eventEnvelope : eventPage.getData()) {
                    saveVaultWithdrawn(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getVaultWithdrawnEventNextCursor() {
        AbstractProjectEvent lastEvent = projectEventRepository.findFirstVaultWithdrawnByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveVaultWithdrawn(SuiMoveEventEnvelope<VaultWithdrawn> eventEnvelope) {
        AbstractProjectEvent.VaultWithdrawn vaultWithdrawn = DomainBeanUtils.toVaultWithdrawn(eventEnvelope);
        if (projectEventRepository.findById(vaultWithdrawn.getProjectEventId()).isPresent()) {
            return;
        }
        projectEventRepository.save(vaultWithdrawn);
    }

    @Transactional
    public void pullDonationRefundedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getDonationRefundedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<DonationRefunded> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PROJECT_MODULE_DONATION_REFUNDED,
                    cursor, limit, false, DonationRefunded.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<DonationRefunded> eventEnvelope : eventPage.getData()) {
                    saveDonationRefunded(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getDonationRefundedEventNextCursor() {
        AbstractProjectEvent lastEvent = projectEventRepository.findFirstDonationRefundedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveDonationRefunded(SuiMoveEventEnvelope<DonationRefunded> eventEnvelope) {
        AbstractProjectEvent.DonationRefunded donationRefunded = DomainBeanUtils.toDonationRefunded(eventEnvelope);
        if (projectEventRepository.findById(donationRefunded.getProjectEventId()).isPresent()) {
            return;
        }
        projectEventRepository.save(donationRefunded);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
