// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.sui.contract.service;

import com.github.wubuku.sui.bean.*;
import com.github.wubuku.sui.utils.*;
import org.test.suicrowdfundingexample.domain.project.*;
import org.test.suicrowdfundingexample.domain.*;
import org.test.suicrowdfundingexample.sui.contract.DomainBeanUtils;
import org.test.suicrowdfundingexample.sui.contract.Project;
import org.test.suicrowdfundingexample.sui.contract.Donation;
import org.test.suicrowdfundingexample.sui.contract.DonationDynamicField;

import java.util.*;
import java.math.*;
import java.util.function.*;

public class SuiProjectStateRetriever {

    private SuiJsonRpcClient suiJsonRpcClient;

    private Function<String, ProjectState.MutableProjectState> projectStateFactory;
    private BiFunction<ProjectState, String, DonationState.MutableDonationState> donationStateFactory;

    public SuiProjectStateRetriever(SuiJsonRpcClient suiJsonRpcClient,
                                  Function<String, ProjectState.MutableProjectState> projectStateFactory,
                                  BiFunction<ProjectState, String, DonationState.MutableDonationState> donationStateFactory
    ) {
        this.suiJsonRpcClient = suiJsonRpcClient;
        this.projectStateFactory = projectStateFactory;
        this.donationStateFactory = donationStateFactory;
    }

    public ProjectState retrieveProjectState(String objectId) {
        SuiMoveObjectResponse<Project> getObjectDataResponse = suiJsonRpcClient.getMoveObject(
                objectId, new SuiObjectDataOptions(true, true, true, true, true, true, true), Project.class
        );
        if (getObjectDataResponse.getData() == null) {
            return null;
        }
        Project project = getObjectDataResponse.getData().getContent().getFields();
        List<String> typeArgs = DomainBeanUtils.extractTypeArguments(getObjectDataResponse.getData().getContent().getType());
        return toProjectState(project, typeArgs);
    }

    private ProjectState toProjectState(Project project , List<String> typeArgs) {
        ProjectState.MutableProjectState projectState = projectStateFactory.apply(project.getId().getId());
        projectState.setVersion(project.getVersion());
        projectState.setOwner(project.getOwner());
        projectState.setTitle(project.getTitle());
        projectState.setDescription(project.getDescription());
        projectState.setTarget(project.getTarget());
        projectState.setDeadline(project.getDeadline());
        projectState.setImage(project.getImage());
        projectState.setVault(project.getVault());
        projectState.setTypeArgumentT(typeArgs.get(0));
        if (project.getDonations() != null) {
            String donationTableId = project.getDonations().getFields().getId().getId();
            List<Donation> donations = getDonations(donationTableId);
            for (Donation i : donations) {
                ((EntityStateCollection.ModifiableEntityStateCollection)projectState.getDonations()).add(toDonationState(projectState, i));
            }
        }

        return projectState;
    }

    private DonationState toDonationState(ProjectState projectState, Donation donation) {
        DonationState.MutableDonationState donationState = donationStateFactory.apply(projectState, donation.getDonator());
        donationState.setAmount(donation.getAmount());
        return donationState;
    }

    private List<Donation> getDonations(String donationTableId) {
        List<Donation> donations = new ArrayList<>();
        String cursor = null;
        while (true) {
            DynamicFieldPage<?> donationFieldPage = suiJsonRpcClient.getDynamicFields(donationTableId, cursor, null);
            for (DynamicFieldInfo donationFieldInfo : donationFieldPage.getData()) {
                String fieldObjectId = donationFieldInfo.getObjectId();
                SuiMoveObjectResponse<DonationDynamicField> getDonationFieldResponse
                        = suiJsonRpcClient.getMoveObject(fieldObjectId, new SuiObjectDataOptions(true, true, true, true, true, true, true), DonationDynamicField.class);
                Donation donation = getDonationFieldResponse
                        .getData().getContent().getFields().getValue().getFields();
                donations.add(donation);
            }
            cursor = donationFieldPage.getNextCursor();
            if (!Page.hasNextPage(donationFieldPage)) {
                break;
            }
        }
        return donations;
    }

    
}

