// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suicrowdfundingexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suicrowdfundingexample.domain.platform.AbstractPlatformEvent;
import org.test.suicrowdfundingexample.sui.contract.ContractConstants;
import org.test.suicrowdfundingexample.sui.contract.DomainBeanUtils;
import org.test.suicrowdfundingexample.sui.contract.SuiPackage;
import org.test.suicrowdfundingexample.sui.contract.platform.InitPlatformEvent;
import org.test.suicrowdfundingexample.sui.contract.platform.ProjectAddedToPlatform;
import org.test.suicrowdfundingexample.sui.contract.platform.PlatformCreated;
import org.test.suicrowdfundingexample.sui.contract.repository.PlatformEventRepository;
import org.test.suicrowdfundingexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class PlatformEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private PlatformEventRepository platformEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractPlatformEvent event) {
        event.setStatus("D");
        platformEventRepository.save(event);
    }

    @Transactional
    public void pullInitPlatformEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getInitPlatformEventNextCursor();
        while (true) {
            PaginatedMoveEvents<InitPlatformEvent> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLATFORM_MODULE_INIT_PLATFORM_EVENT,
                    cursor, limit, false, InitPlatformEvent.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<InitPlatformEvent> eventEnvelope : eventPage.getData()) {
                    saveInitPlatformEvent(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getInitPlatformEventNextCursor() {
        AbstractPlatformEvent lastEvent = platformEventRepository.findFirstInitPlatformEventByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveInitPlatformEvent(SuiMoveEventEnvelope<InitPlatformEvent> eventEnvelope) {
        AbstractPlatformEvent.InitPlatformEvent initPlatformEvent = DomainBeanUtils.toInitPlatformEvent(eventEnvelope);
        if (platformEventRepository.findById(initPlatformEvent.getPlatformEventId()).isPresent()) {
            return;
        }
        platformEventRepository.save(initPlatformEvent);
    }

    @Transactional
    public void pullProjectAddedToPlatformEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getProjectAddedToPlatformEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ProjectAddedToPlatform> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLATFORM_MODULE_PROJECT_ADDED_TO_PLATFORM,
                    cursor, limit, false, ProjectAddedToPlatform.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ProjectAddedToPlatform> eventEnvelope : eventPage.getData()) {
                    saveProjectAddedToPlatform(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getProjectAddedToPlatformEventNextCursor() {
        AbstractPlatformEvent lastEvent = platformEventRepository.findFirstProjectAddedToPlatformByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveProjectAddedToPlatform(SuiMoveEventEnvelope<ProjectAddedToPlatform> eventEnvelope) {
        AbstractPlatformEvent.ProjectAddedToPlatform projectAddedToPlatform = DomainBeanUtils.toProjectAddedToPlatform(eventEnvelope);
        if (platformEventRepository.findById(projectAddedToPlatform.getPlatformEventId()).isPresent()) {
            return;
        }
        platformEventRepository.save(projectAddedToPlatform);
    }

    @Transactional
    public void pullPlatformCreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getPlatformCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<PlatformCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.PLATFORM_MODULE_PLATFORM_CREATED,
                    cursor, limit, false, PlatformCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<PlatformCreated> eventEnvelope : eventPage.getData()) {
                    savePlatformCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getPlatformCreatedEventNextCursor() {
        AbstractPlatformEvent lastEvent = platformEventRepository.findFirstPlatformCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void savePlatformCreated(SuiMoveEventEnvelope<PlatformCreated> eventEnvelope) {
        AbstractPlatformEvent.PlatformCreated platformCreated = DomainBeanUtils.toPlatformCreated(eventEnvelope);
        if (platformEventRepository.findById(platformCreated.getPlatformEventId()).isPresent()) {
            return;
        }
        platformEventRepository.save(platformCreated);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
